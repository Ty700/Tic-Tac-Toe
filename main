/*
*   Author: Tyler Scotti
*   Description: This is a simple Tic Tac Toe game that a user can play against the CPU. The user will always go first, and will always be the letter 'x'.
*   
*   To Do: 
        1. User side needs to work.
            a. Update board when the user enters where they want to place their x. - DONE 
                Ex: When the user enters "5", the board replaces 5 with an x, thus the board will have an X in the middle with 1-4, and 6-9 surrounding it in their respected field.
        2. Winning Outcomes
            a. Logic behind this is gonna be intense. 123, 456, 789, 147, 258, and 369, are all wining pairs. 
                Thinking about setting up a user vector. pushing back the user entries into the vector. after the user has their max of 5 turns, sorting the entries from least to greatest and 
                computing if the index to the left and right of indexs 1 and 4 are of a winning pattern described above.
                This will also be later updated to check after each entry of the user (and then CPU) so that if a user wins prior to 5 turns it ends game
            b. Valid Entries - DONE
        3. After User and Winning Outcomes, CPU will be made. 
            a. Updates the board where CPU places their 'O's. - DONE
            b. Generates valid entries.
        3. Add a validity check for inputs since right now user and CPU can each other's pieces.
*
*
*/
#include <vector>
#include <iostream>
#include <string>
#include <vector>
#include <time.h>
#include <stdio.h>

//Function Declaration
void printBoard();
std::string updateBoardUser(int userInput);
std::string updateBoardCPU(int cpuInput);
void blank(int num);

//Global Vars
const int ROWS = 3;
const int COLS = 3;
std::string board[ROWS][COLS] = {{"1","2","3"}, {"4","5","6"}, {"7","8","9"}};

int main(){

srand(time(NULL));

//Main Vars
    int userInput;
    int cpuInput;
    int cpuInputReroll;
    std::vector<int> userChoice; //User choices only
    std::vector<int> cpuChoice; //CPU Choice only
    std::vector<int> choices(9); //Both User and CPU choices combined
    int i = 0;
    int counter = 0;

//Clears screen
    blank(10);


//Board without any entires
    printBoard();

while(counter < 5){ 
//User Input
    std::cout << "Where would you like to place your X? \n";
        std::cin >> userInput;

//Validity check for user
    int counterOfTries = 2;
    for(i=0; i < choices.size(); i++){
        while(userInput == choices.at(i)){
            std::cout << "Looks like that spot is taken. Try again.\n";
            std::cout << "\nWhere would you like to place your O?\n";
            std::cin >> userInput;
            counterOfTries--;
            if(counterOfTries <= 1){
                std::cout << "\nWarning: " << counterOfTries << " tries left before it will skip your turn.\n";
                if(counterOfTries == 0){
                    break;
                }
            }
        }
    }

//Clears screen
    blank(10);

//Appends input to userInput Vector
    userChoice.push_back(userInput);
    choices.push_back(userInput);

//Updates board
    updateBoardUser(userInput);

//Checks for winning pairs using userInput Vector

//Outputs the updated board
    printBoard();

//If no winning pairs found - CPU completes turn

//Generate CPU entry
    cpuInput = (rand() % 9) + 1;
    _sleep(1000);

//Validty check for CPU - Broken
    for(i=0; i < choices.size(); i++){
        if(cpuInput == choices.at(i)){
            int temp = (rand() % 9) + 1;
            if(temp != cpuInput){
                break;
            } else{
                cpuInput = temp;
            }
                      
        }
    }

//Append CPU entry to CPU vector
    cpuChoice.push_back(cpuInput);
    choices.push_back(cpuInput);

//Displays where CPU went
    int temp = (rand() % 3);

    switch (temp){
        case 0:
            std::cout << "Ah yes... " << cpuInput << " appears to be the best choice.\n";
            break;
        case 1:
            std::cout << "Hmmm... well-played. I choose " << cpuInput << " as my choice.\n";
            break;
        case 2:
            std::cout << "Have I won yet? I choose " << cpuInput << " by the way.\n";
            break;
    }

    
//Updates board
    updateBoardCPU(cpuInput);
//Checks for winning pairs

//Outputs the updated board
    printBoard();

//Repeat -- End of While loop
counter++;
}
}



//Updates array for User
std::string updateBoardUser(int userInput){
    switch (userInput){
        case 1: 
            return board[0][0] = 'X';
            break;
        case 2: 
            return board[0][1] = 'X';
            break;
        case 3: 
            return board[0][2] = 'X';
            break;
        case 4: 
            return board[1][0] = 'X';
            break;
        case 5: 
            return board[1][1] = 'X';
            break;
        case 6: 
            return board[1][2] = 'X';
            break;
        case 7: 
            return board[2][0] = 'X';
            break;
        case 8: 
            return board[2][1] = 'X';
            break;
        case 9: 
            return board[2][2] = 'X';
            break;
    }
}

//Updates array
std::string updateBoardCPU(int cpuInput){
    switch (cpuInput){
        case 1: 
            return board[0][0] = 'O';
            break;
        case 2: 
            return board[0][1] = 'O';
            break;
        case 3: 
            return board[0][2] = 'O';
            break;
        case 4: 
            return board[1][0] = 'O';
            break;
        case 5: 
            return board[1][1] = 'O';
            break;
        case 6: 
            return board[1][2] = 'O';
            break;
        case 7: 
            return board[2][0] = 'O';
            break;
        case 8: 
            return board[2][1] = 'O';
            break;
        case 9: 
            return board[2][2] = 'O';
            break;
    }
}


//Prints the board
void printBoard(){
    std::cout << "  |   |   \n";
    std::cout << board[0][0] << " | " << board[0][1] <<  " | "  << board[0][2] << "\n";
    std::cout << "__|___|___\n";
    std::cout << "  |   |   \n";
    std::cout << board[1][0] << " | " << board[1][1] <<  " | "  << board[1][2] << "\n";
    std::cout << "__|___|___\n";
    std::cout << "  |   |   \n";
    std::cout << board[2][0] << " | " << board[2][1] <<  " | "  << board[2][2] << "\n";
    std::cout << "  |   |   \n";

}


//Cheeky blank cmd line clear to get rid of simon says entry. User can just scroll up and see the entry again but hopefully they don't realize and just think the screen clears.
void blank(int num){
   int i;
   for(i=0; i<num; i++){
      std::cout << ("\n");
   }
}
