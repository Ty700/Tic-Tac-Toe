/*
*   Author: Tyler Scotti
*   Description: This is a simple Tic Tac Toe game that a user can play against the CPU. The CPU will always go first
*   
*   To Do: 
*       1. User - DONE
*           a. Update board when the user enters where they want to place their x. - DONE 
*           b. Valid Entries - DONE
*       2. Winning Outcomes - 1/2 DONE - For some reason it doesn't work when checking CPU
*
*       3. CPU - DONE -  Doesn't compute whenn CPU wins for some reason. Worked earlier but not now.
*           a. Updates the board where CPU places their 'O's. - DONE
*           b. Generates valid entries. - DONE
*       
*       4. Add a validity check for inputs since right now user and CPU can each other's pieces. - DONE
*       
*       5. Make CPU Harder to play against.
*       
*       6. Added a check for ties
*
*       7. Randomize who goes first.
*/
#include <vector>
#include <iostream>
#include <string>
#include <vector>
#include <time.h>
#include <stdio.h>

//Function Declaration
void printBoard();
void blank(int num);
std::string choosenSpot(int choice);
std::string updateBoard(int choice, std::string turn);
bool gameOver();
int playerTurn();
int cpuTurn();
void cpuTrashTalk();
bool isTie();

//Global Vars
const int ROWS = 3;
const int COLS = 3;
std::string board[ROWS][COLS] = {{"1","2","3"}, {"4","5","6"}, {"7","8","9"}};
int choice;

int main(){

int round = 0;
//Clears screen
blank(10);
//Board without any entires
printBoard();

while(gameOver()){
//Cpu Turn
    cpuTurn();
//Displays where CPU went
    cpuTrashTalk();
//Updates board
    updateBoard(choice, "CPU");
//Prints updated board
    printBoard();
//Checks for winning pairs
    if(gameOver() == false){
        std::cout << "As I predicted... You lose.\nBetter luck next time!";
        break;
    }
//Tie?

//Player Turn
    playerTurn();
//Updates Board
    updateBoard(choice, "User");
//Updates board
    printBoard();
//Checks for winning pairs
    if(gameOver() == false){
        std::cout << "Gah! You beat me! Good job I guess.";
        break;
    }
  }
}

//CPU Turn
int cpuTurn(){
    //Randomizes numbers a bit for CPU
    srand(time(NULL));

    //Slows CPU down so it isn't instant. Gives off the illusion that CPU thinks before it acts.
    _sleep(1500);

    //Generate CPU entry and a validty check for CPU
    choice = (rand() % 9) + 1;
    while(choosenSpot(choice) == "X" || choosenSpot(choice) == "O"){
        choice = (rand() % 9) + 1;
    }
    return choice;
}

void cpuTrashTalk(){
    //Displays where CPU went
    int temp = (rand() % 3);
    switch (temp){
        case 0:
            std::cout << "Ah yes... " << choice << " appears to be the best choice.\n";
            break;
        case 1:
            std::cout << "Hmmm... well-played. I choose " << choice << " as my choice.\n";
            break;
        case 2:
            std::cout << "Have I won yet? I choose " << choice << " by the way.\n";
            break;
    }
}

bool isTie(){
    int round = 0;
    round +=1;
    if(round == 5){
        return true;
    } else {
        return false;
    }
}

//Player Turn
int playerTurn(){
    //User Input
    std::cout << "Where would you like to place your X? \n";
        std::cin >> choice;

    while((choice < 1 || choice > 9 )){
      std::cout << "Invalid move. Try again.\n";
      std::cin >> choice;
   }

    //Validity check for user
    while(choosenSpot(choice) == "X" || choosenSpot(choice) == "O"){
        std::cout << "That spot is taken... Try again\n";
            std::cin >> choice;
    }
    return choice;
}

//Returns the spot the User/CPU has chosen
std::string choosenSpot(int choice){
    switch (choice){
        case 1: 
            return board[0][0];
            break;
        case 2: 
            return board[0][1];
            break;
        case 3:
            return board[0][2];
            break;
        case 4:
            return board[1][0];
            break;
        case 5:
            return board[1][1];
            break;
        case 6:
            return board[1][2];
            break;
        case 7:
            return board[2][0];
            break;
        case 8:
            return board[2][1];
            break;
        case 9:
            return board[2][2];
            break;
    }
}

//Updates board with User/CPU entries
std::string updateBoard(int choice, std::string turn){
    switch (choice){
        case 1: 
        board[0][0] = (turn == "User") ? "X" : "O";
            return board[0][0];
            break;
        case 2:
         board[0][1] = (turn == "User") ? "X" : "O";
            return board[0][1];
            break;
        case 3:
            board[0][2] = (turn == "User") ? "X" : "O"; 
            return board[0][2];
            break;
        case 4:
            board[1][0] = (turn == "User") ? "X" : "O";
            return board[1][0];
            break;
        case 5:
            board[1][1] = (turn == "User") ? "X" : "O";
            return board[1][1];
            break;
        case 6:
            board[1][2] = (turn == "User") ? "X" : "O";
            return board[1][2];
            break;
        case 7:
            board[2][0] = (turn == "User") ? "X" : "O";
            return board[2][0];
            break;
        case 8:
            board[2][1] = (turn == "User") ? "X" : "O";
            return board[2][1];
            break;
        case 9:
            board[2][2] = (turn == "User") ? "X" : "O";
            return board[2][2];
            break;
    }
}

//Prints the board
void printBoard(){
    std::cout << "  |   |   \n";
    std::cout << board[0][0] << " | " << board[0][1] <<  " | "  << board[0][2] << "\n";
    std::cout << "__|___|___\n";
    std::cout << "  |   |   \n";
    std::cout << board[1][0] << " | " << board[1][1] <<  " | "  << board[1][2] << "\n";
    std::cout << "__|___|___\n";
    std::cout << "  |   |   \n";
    std::cout << board[2][0] << " | " << board[2][1] <<  " | "  << board[2][2] << "\n";
    std::cout << "  |   |   \n";

}

//Checks if User/CPU has won
bool gameOver(){
    for(int i = 0; i < 3; i++){
        //Checks Row
        if(board[i][0] == board[i][1] && board[i][1] == board[i][2]){
            return false;
        //Check Columns
        } else if(board[0][i] == board[1][i] &&  board[1][i] == board[2][i]){
            return false;
        //Check Diagonal
        } else if (board[0][0] == board[1][1] && board[1][1] == board[2][2] || board[0][2] == board[1][1] && board[1][1] == board[2][0]){
            return false;
        //No winners. Continues game.
        } else {
            return true;
        }
    }
}

//Cheeky blank cmd line clear to get rid of simon says entry. User can just scroll up and see the entry again but hopefully they don't realize and just think the screen clears.
void blank(int num){
   int i;
   for(i=0; i<num; i++){
      std::cout << ("\n");
   }
}
